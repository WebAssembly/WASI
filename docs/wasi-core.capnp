@0xf8a5c786b8463cf0;

# TODO
# * __wasi_dircookie_t has a specail value
# * bitfields may need to have an annotation
# * writing inline markdown isn't pretty
# * needs doc generator

using SizeT = UInt64;
using TimestampT = UInt64; # Timestamp in nanoseconds.
# A file descriptor number.
# Used by many functions in this API.
# As in POSIX, three file descriptor numbers are provided to instances on startup -- 0, 1, and 2, (a.k.a. STDIN_FILENO, STDOUT_FILENO, and STDERR_FILENO).
# Other than these, WASI implementations are not required to allocate new file descriptors in ascending order.
using FdT = UInt32;
using DircookieT = UInt64; # A reference to the offset of a directory entry.
using FiledeltaT = Int64; # Relative offset within a file.
using FilesizeT = UInt64; # Non-negative file size or length of a region within a file.
using IovecT = Data; # A region of memory for scatter/gather reads.
using CiovecT = Data; # A region of memory for scatter/gather writes.
using UserdataT = UInt64; # User-provided value that may be attached to objects that is retained when extracted from the implementation.
using ExitcodeT = UInt32; # Exit code generated by a process when exiting.

enum ClockId {
  # The store-wide monotonic clock, which is defined as a clock measuring real time, whose value cannot be adjusted and which cannot have negative clock jumps.
  # The epoch of this clock is undefined. The absolute time value of this clock therefore has no meaning.
  monotonic @0;
  # The CPU-time clock associated with the current process.
  processcputimeid @1;
  #  The clock measuring real time. Time value zero corresponds with 1970-01-01T00:00:00Z.
  realtime @2;
  # The CPU-time clock associated with the current thread.
  threadcputimeid @3;
}

# Error codes returned by functions.
# Not all of these error codes are returned by the functions provided by this API; some are used in higher-level library layers, and others are provided merely for alignment with POSIX.
enum ErrnoT {
  esuccess @0; # No error occurred. System call completed successfully.
  e2big @1; # Argument list too long.
  eacces @2; # Permission denied.
  eaddrinuse @3; # Address in use.
  eaddrnotavail @4; # Address not available.
  eafnosupport @5; # Address family not supported.
  eagain @6; # Resource unavailable, or operation would block.
  ealready @7; # Connection already in progress.
  ebadf @8; # Bad file descriptor.
  ebadmsg @9; # Bad message.
  ebusy @10; # Device or resource busy.
  ecanceled @11; # Operation canceled.
  eechild @12; # No child processes.
  econnaborted @13; # Connection aborted.
  econnrefused @14; # Connection refused.
  econnreset @15; # Connection reset.
  edeadlk @16; # Resource deadlock would occur.
  edestaddrreq @17; # Destination address required.
  edom @18; # Mathematics argument out of domain of function.
  edquot @19; # Reserved.
  eexist @20; # File exists.
  efault @21; # Bad address.
  efbig @22; # File too large.
  ehostunreach @23; # Host is unreachable.
  eidrm @24; # Identifier removed.
  eilseq @25; # Illegal byte sequence.
  einprogress @26; # Operation in progress.
  eintr @27; # Interrupted function.
  einval @28; # Invalid argument.
  eio @29; # I/O error.
  eisconn @30; # Socket is connected.
  eisdir @31; # Is a directory.
  eloop @32; # Too many levels of symbolic links.
  emfile @33; # File descriptor value too large.
  emlink @34; # Too many links.
  emsgsize @35; # Message too large.
  emultihop @36; # Reserved.
  enametoolong @37; # Filename too long.
  enetdown @38; # Network is down.
  enetreset @39; # Connection aborted by network.
  enetunreach @40; # Network unreachable.
  enfile @41; # Too many files open in system.
  enobufs @42; # No buffer space available.
  enodev @43; # No such device.
  enoent @44; # No such file or directory.
  enoexec @45; # Executable file format error.
  enolck @46; # No locks available.
  enolink @47; # Reserved.
  enomem @48; # Not enough space.
  enomsg @49; # No message of the desired type.
  enoprotoopt @50; # Protocol not available.
  enospc @51; # No space left on device.
  enosys @52; # Function not supported.
  enotconn @53; # The socket is not connected.
  enotdir @54; # Not a directory or a symbolic link to a directory.
  enotempty @55; # Directory not empty.
  enotrecoverable @56; # State not recoverable.
  enotsock @57; # Not a socket.
  enotsup @58; # Not supported, or operation not supported on socket.
  enotty @59; # Inappropriate I/O control operation.
  enxio @60; # No such device or address.
  eoverflow @61; # Value too large to be stored in data type.
  eownerdead @62; # Previous owner died.
  eperm @63; # Operation not permitted.
  epipe @64; # Broken pipe.
  eproto @65; # Protocol error.
  eprotonosupport @66; # Protocol not supported.
  eprototype @67; # Protocol wrong type for socket.
  erange @68; # Result too large.
  erofs @69; # Read-only file system.
  espipe @70; # Invalid seek.
  esrch @71; # No such process. 
  estale @72; # Reserved
  etimedout @73; # Connection timed out.
  etxtbsy @74; # Text file busy.
  exdev @75; # Cross-device link.
  enotcapable @76; # Extension: Capabilities insufficient.
}

# File or memory access pattern advisory information.
enum AdviceT {
  dontneed @0; # The application expects that it will not access the specified data in the near future.
  noreuse @1; # The application expects to access the specified data once and then not reuse it thereafter.
  normal @2; # The application has no advice to give on its behavior with respect to the specified data.
  random @3; # The application expects to access the specified data in a random order.
  sequential @4; # The application expects to access the specified data sequentially from lower offsets to higher offsets.
  willneed @5; # The application expects to access the specified data in the near future.
}

# The type of a file descriptor or file.
enum FiletypeT {
  unknown @0; # The type of the file descriptor or file is unknown or is different from any of the other types specified.
  blockDevices @1; # The file descriptor or file refers to a block device inode.
  characterDevice @2; # The file descriptor or file refers to a character device inode.
  directory @3; # The file descriptor or file refers to a directory inode.
  regularFile @4; # The file descriptor or file refers to a regular file inode.
  socketDgram @5; # The file descriptor or file refers to a datagram socket.
  socketStream @6; # The file descriptor or file refers to a byte-stream socket.
  symbolicLink @7; # The file refers to a symbolic link inode.
}

enum WhenceT {
  cur @0; # Seek relative to current position.
  end @1; # Seek relative to end-of-file.
  set @2; # Seek relative to start-of-file.
}

# Flags determining the method of how paths are resolved.
enum LookupFlagsT {
  lookupSymlinkFollow @0; # As long as the resolved path corresponds to a symbolic link, it is expanded.
}

# Open flags
enum OflagsT {
  creat @0; # Create file if it does not exist.
  directory @1; # Fail if not a directory.
  excl @2; # Fail if file already exists.
  trunc @3; # Truncate file to size 0.
}

enum EventTypeT {
  clock @0; # The time value of clock __wasi_subscription_t::u.clock.clock_id has reached timestamp __wasi_subscription_t::u.clock.timeout.
  fdRead @1; # File descriptor __wasi_subscription_t::u.fd_readwrite.fd has data available for reading. This event always triggers for regular files.
  fdWrite @2; # File descriptor __wasi_subscription_t::u.fd_readwrite.fd has capacity available for writing. This event always triggers for regular files.
}

# The state of the file descriptor subscribed to with __WASI_EVENTTYPE_FD_READ or __WASI_EVENTTYPE_FD_WRITE.
enum EventrwflagsT {
  eventFdReadwriteHangup @0; # The peer of this socket has closed or disconnected.
}

# Signal condition.
enum SignalT {
  sigabrt @0; # Process abort signal. Action: Terminates the process.
  sigalrm @1; # Alarm clock. Action: Terminates the process
  sigbus @2; # Access to an undefined portion of a memory object. Action: Terminates the process.
  sigchld @3; # Child process terminated, stopped, or continued. Action: Ignored.
  sigcont @4; # Continue executing, if stopped. Action: Continues executing, if stopped.
  sigfpe @5; # Erroneous arithmetic operation. Action: Terminates the process.
  sighup @6; # Hangup. Action: Terminates the process.
  sigill @7; # Illegal instruction. Action: Terminates the process.
  sigint @8; # Terminate interrupt signal. Action: Terminates the process.
  sigkill @9; # Kill. Action: Terminates the process.
  sigpipe @10; # Write on a pipe with no one to read it. Action: Ignored.
  sigquit @11; # Terminal quit signal. Action: Terminates the process.
  sigsegv @12; # Invalid memory reference. Action: Terminates the process.
  sigstop @13; # Stop executing. Action: Stops executing.
  sigsys @14; # Bad system call. Action: Terminates the process.
  sigterm @15; # Termination signal. Action: Terminates the process.
  sigtrap @16; # Trace/breakpoint trap. Action: Terminates the process.
  sigtstp @17; # Terminal stop signal. Action: Stops executing.
  sigttin @18; # Background process attempting read. Action: Stops executing.
  sigttou @19; # Background process attempting write. Action: Stops executing.
  sigurg @20; # High bandwidth data is available at a socket. Action: Ignored.
  sigusr1 @21; # User-defined signal 1. Action: Terminates the process.
  sigusr2 @22; # User-defined signal 2. Action: Terminates the process.
  sigvtalrm @23; # Virtual timer expired. Action: Terminates the process.
  sigxcpu @24; # CPU time limit exceeded. Action: Terminates the process.
  sigxfsz @25; # File size limit exceeded. Action: Terminates the process
}

# Flags provided to __wasi_sock_recv().
struct RiflagsT {
  sockRecvPeek @0 :Bool; # Returns the message without removing it from the socket's receive queue.
  sockRecvWaitall @1 :Bool; # On byte-stream sockets, block until the full amount of data can be returned.
}

# Flags returned by __wasi_sock_recv().
struct RoFlags {
  sockRecvDataTruncated @0 :Bool; # Returned by __wasi_sock_recv(): Message data has been truncated.
}

# Flags provided to __wasi_sock_send(). As there are currently no flags defined, it must be set to zero.
enum SiflagsT {
}

struct FdflagsT {
  fdflagAppend @0 :Bool; # Append mode: Data written to the file is always appended to the file's end.
  fdflagDsync @1 :Bool; # Write according to synchronized I/O data integrity completion. Only the data stored in the file is synchronized.
  fdflagNonblock @2 :Bool; # Non-blocking mode.
  fdflagRsync @3 :Bool; # Synchronized read I/O operations.
  fdflagSync @4 :Bool; # Write according to synchronized I/O file integrity completion. In addition to synchronizing the data stored in the file, the implementation may also synchronously update the file's metadata.
}

# File descriptor rights, determining which actions may be performed.
struct RightsT {
  fdDatasync @0 :Bool; # The right to invoke __wasi_fd_datasync(). If __WASI_RIGHT_PATH_OPEN is set, includes the right to invoke __wasi_path_open() with __WASI_FDFLAG_DSYNC.
  fdRead @1 :Bool; # The right to invoke __wasi_fd_read() and __wasi_sock_recv(). If __WASI_RIGHT_FD_SEEK is set, includes the right to invoke __wasi_fd_pread().
  fdSeek @2 :Bool; # The right to invoke __wasi_fd_seek(). This flag implies __WASI_RIGHT_FD_TELL.
  fdFdstatSetFlags @3 :Bool; # The right to invoke __wasi_fd_fdstat_set_flags().
  fdSync @4 :Bool; # The right to invoke __wasi_fd_sync(). If __WASI_RIGHT_PATH_OPEN is set, includes the right to invoke __wasi_path_open() with __WASI_FDFLAG_RSYNC and __WASI_FDFLAG_DSYNC.
  fdTell @5 :Bool; # The right to invoke __wasi_fd_seek() in such a way that the file offset remains unaltered (i.e., __WASI_WHENCE_CUR with offset zero), or to invoke __wasi_fd_tell().
  fdWrite @6 :Bool; # The right to invoke __wasi_fd_write() and __wasi_sock_send(). If __WASI_RIGHT_FD_SEEK is set, includes the right to invoke __wasi_fd_pwrite().
  fdAdvise @7 :Bool; # The right to invoke __wasi_fd_advise().
  fdAllocate @8 :Bool; # The right to invoke __wasi_fd_allocate().
  pathCreateDirectory @9 :Bool; # The right to invoke __wasi_path_create_directory().
  pathCreateFile @10 :Bool; # If __WASI_RIGHT_PATH_OPEN is set, the right to invoke __wasi_path_open() with __WASI_O_CREAT.
  pathLinkSource @11 :Bool; # The right to invoke __wasi_path_link() with the file descriptor as the source directory.
  pathLinkTarget @12 :Bool; # The right to invoke __wasi_path_link() with the file descriptor as the target directory.
  pathOpen @13 :Bool; # The right to invoke __wasi_path_open().
  fdReaddir @14 :Bool; # The right to invoke __wasi_fd_readdir().
  pathReadlink @15 :Bool; # The right to invoke __wasi_path_readlink().
  pathRenameSource @16 :Bool; # The right to invoke __wasi_path_rename() with the file descriptor as the source directory.
  pathRenameTarget @17 :Bool; # The right to invoke __wasi_path_rename() with the file descriptor as the target directory.
  pathFilestatGet @18 :Bool; # The right to invoke __wasi_path_filestat_get().
  # The right to change a file's size (there is no __wasi_path_filestat_set_size()). 
  # If __WASI_RIGHT_PATH_OPEN is set, includes the right to invoke __wasi_path_open with __WASI_O_TRUNC.
  pathFilestatSetSize @19 :Bool; 
  pathFilestatSetTimes @20 :Bool; # The right to invoke __wasi_path_filestat_set_times().
  fdFilestatGet @21 :Bool; # The right to invoke __wasi_fd_filestat_get().
  fdFilestatSetSize @22 :Bool; # The right to invoke __wasi_fd_filestat_set_size().
  fdFilestatSetTimes @23 :Bool; # The right to invoke __wasi_fd_filestat_set_times().
  pathSymlink @24 :Bool; # The right to invoke __wasi_path_symlink().
  pathUnlinkFile @25 :Bool; # The right to invoke __wasi_path_unlink_file().
  pathRemoveDirectory @26 :Bool; # The right to invoke __wasi_path_remove_directory().
  # If __WASI_RIGHT_FD_READ is set, includes the right to invoke __wasi_poll_oneoff() to subscribe to __WASI_EVENTTYPE_FD_READ.
  # If __WASI_RIGHT_FD_WRITE is set, includes the right to invoke __wasi_poll_oneoff() to subscribe to __WASI_EVENTTYPE_FD_WRITE.
  pollFdReadwrite @27 :Bool; 
  sockShutdown @28 :Bool;  # The right to invoke __wasi_sock_shutdown().
}

# File descriptor attributes.
struct FdstatT {
  fsFiletype @0 :FiletypeT; # File type.
  fsFlags @1 :FdflagsT; # File descriptor flags.
  fsRightsBase @2 :RightsT; # Rights that apply to this file descriptor.
  fsRightsInheriting @3 :RightsT; # Maximum set of rights that may be installed on new file descriptors that are created through this file descriptor, e.g., through __wasi_path_open().
}

# Which file time attributes to adjust.
struct FstflagsT {
  filestatSetAtim @0 :Bool; # Adjust the last data access timestamp to the value stored in __wasi_filestat_t::st_atim.
  filestatSetAtimNow @1 :Bool; # Adjust the last data access timestamp to the time of clock __WASI_CLOCK_REALTIME.
  filestatSetMtim @2 :Bool; # Adjust the last data modification timestamp to the value stored in __wasi_filestat_t::st_mtim.
  filestatSetMtimNow @3 :Bool; # Adjust the last data modification timestamp to the time of clock __WASI_CLOCK_REALTIME.
}

# Subscription to an event.
struct SubscriptionT {
  userdata @0 :UserdataT; # User-provided value that is attached to the subscription in the implementation and returned through __wasi_event_t::userdata.
  type @1 :EventTypeT; # The type of the event to which to subscribe.
  union {
    # When type is __WASI_EVENTTYPE_CLOCK
    clock :group {
      identifier @2 :UserdataT; # The user-defined unique identifier of the clock.
      clockId @3 :ClockId; # The clock against which to compare the timestamp.
      timeout @4 :TimestampT; # The absolute or relative timestamp.
      precision @5 :TimestampT; # The amount of time that the implementation may wait additionally to coalesce with other events.
    }
    # When type is __WASI_EVENTTYPE_FD_READ or __WASI_EVENTTYPE_FD_WRITE
    fdReadwrite :group {
      fd @6 :FdT; # The file descriptor on which to wait for it to become ready for reading or writing.
    }
  }
}

# An event that occurred.
struct EventT {
  userdata @0 :UserdataT; # User-provided value that got attached to __wasi_subscription_t::userdata.
  error @1 :ErrnoT; # If non-zero, an error that occurred while processing the subscription request.
  type @2 :EventTypeT; # The type of the event that occurred.
  union {
    # When type is __WASI_EVENTTYPE_FD_READ or __WASI_EVENTTYPE_FD_WRITE
    fdReadwrite :group {
      nbytes @3 :FilesizeT; # The number of bytes available for reading or writing.
      flags @4 :EventrwflagsT; # The state of the file descriptor. 
    }
    else @5 :Void;
  }
} 

# Which channels on a socket to shut down.
struct SdflagsT {
  shutRd @0 :Bool; # Disables further receive operations.
  shutWr @1 :Bool; # Disables further send operations.
}

interface WasiCore {

  # Read command-line argument data.
  # The sizes of the buffers should match that returned by __wasi_args_sizes_get().
  argsGet @0 () -> (argv_buf :List(Data));

  # Return command-line argument data sizes.
  argsSizesGet @1 () -> (
    argc :SizeT, # The number of arguments.
    argv_buf_size :SizeT # The size of the argument string data.
  );

  # Return the resolution of a clock.
  # Implementations are required to provide a non-zero value for supported clocks. For unsupported clocks, return `einval`.
  # Note: This is similar to clock_getres in POSIX.
  clockResGet @2 (
    clock_id :ClockId # The clock for which to return the resolution.
  ) -> (
    resolution :TimestampT # The resolution of the clock.
  );

  # Return the time value of a clock.
  # Note: This is similar to clock_gettime in POSIX.
  clockTimeGet @3 (
    clock_id :ClockId, # The clock for which to return the time.
    precision :TimestampT # The maximum lag (exclusive) that the returned time value may have, compared to its actual value.
  ) -> (
    time :TimestampT # The time value of the clock.
  );

  # Read environment variable data.
  # The sizes of the buffers should match that returned by environ_sizes_get().
  environGet @4 () -> (
    environ :List(Data) # A pointer to a buffer to write the environment variable pointers.
  );

  # Return command-line argument data sizes.
  environSizesGet @5 () -> (
    environ_count :SizeT, # The number of environment variables.
    environ_buf_size :SizeT # The size of the environment variable string data.
  );

  # Provide file advisory information on a file descriptor.
  # Note: This is similar to posix_fadvise in POSIX.
  fdAdvise @6 (
    fd :FdT, # The file descriptor for the file for which to provide file advisory information.
    offset :FilesizeT, # The offset within the file to which the advisory applies.
    len :FilesizeT, # The length of the region to which the advisory applies.
    advice :AdviceT #The advice.
  ) -> ();

  # Force the allocation of space in a file. 
  # Note: This is similar to posix_fallocate in POSIX.
  fdAllocate @7 (
    fd :FdT, # The file descriptor for the file in which to allocate space.
    offset :FilesizeT, # The offset at which to start the allocation.
    len :FilesizeT # The length of the area that is allocated.
  ) -> ();

  # Close a file descriptor.
  # Note: This is similar to close in POSIX.
  fdClose @8 (
    fd :FdT # The file descriptor to close.
  ) -> ();

  # Synchronize the data of a file to disk.
  # Note: This is similar to fdatasync in POSIX.
  fdDatasync @9 (
    fd :FdT # The file descriptor of the file to synchronize to disk.
  ) -> ();

  # Get the attributes of a file descriptor.
  # Note: This returns similar flags to fsync(fd, F_GETFL) in POSIX, as well as additional fields.
  fdFdstatGet @10 (
    fd :FdT # The file descriptor to inspect.
  ) -> (
    buf :Data # The buffer where the file descriptor's attributes are stored.
  );

  # Adjust the flags associated with a file descriptor.
  # Note: This is similar to fcntl(fd, F_SETFL, flags) in POSIX.
  fdFdstatSetFlags @11 (
    fd :FdT, # The file descriptor to operate on.
    flags :FdflagsT # The desired values of the file descriptor flags.
  ) -> ();

  # Adjust the rights associated with a file descriptor.
  # This can only be used to remove rights, and returns __WASI_ENOTCAPABLE if called in a way that would attempt to add rights.
  fdFdstatSetRights @12 (
    fd :FdT, # The file descriptor to operate on.
    fsRightsBase :RightsT, # The desired rights of the file descriptor. 
    fsRightsInheriting :RightsT 
  ) -> ();

  # Return the attributes of an open file.
  fdFilestatGet @13 (
    fd :FdT, # The file descriptor to inspect.
  ) -> (
    buf :FdstatT # The buffer where the file descriptor's attributes are stored.
  );

  # Adjust the size of an open file. If this increases the file's size, the extra bytes are filled with zeros.
  # Note: This is similar to ftruncate in POSIX.
  fdFilestatSetSize @14 (
    fd :FdT, # A file descriptor for the file to adjust.
    stSize :FilesizeT # The desired file size.
  ) -> ();

  # Adjust the timestamps of an open file or directory.
  # Note: This is similar to futimens in POSIX.
  fdFilestatSetTimes @15 (
    fd :FdT, # The file descriptor to operate on.
    stAtim :TimestampT, # The desired values of the data access timestamp.
    stMtim :TimestampT, # The desired values of the data modification timestamp.
    fstFlags :FstflagsT # A bitmask indicating which timestamps to adjust.
  ) -> ();

  # Read from a file descriptor, without using and updating the file descriptor's offset.
  # Note: This is similar to preadv in POSIX.
  fdPread @16 (
    fd :FdT, # The file descriptor from which to read data.
    iovs :List(IovecT) # List of scatter/gather vectors to which to store data.
  ) -> (
    nread :SizeT # The number of bytes read.
  );

  # Return a description of the given preopened file descriptor.
  fdPrestatGet @17 (
    fd :FdT, # The file descriptor about which to retrieve information.
    #buf :__wasi_prestat_t  # The buffer where the description is stored.
  ) -> ();

  # Return a description of the given preopened file descriptor.
  fdPrestatDirName @18 (
    fd :FdT, # The file descriptor about which to retrieve information.
  ) -> (
    path :Data # A buffer into which to write the preopened directory name.
  );

  # Write to a file descriptor, without using and updating the file descriptor's offset.
  # Note: This is similar to pwritev in POSIX
  fdPwrite @19 (
    fd :FdT, # The file descriptor to which to write data.
    iovs :List(IovecT), # List of scatter/gather vectors from which to retrieve data.
    offset :FilesizeT # The offset within the file at which to write.
  ) -> (
    nwritten :SizeT # The number of bytes written.
  );

  # Read from a file descriptor.
  # Note: This is similar to readv in POSIX.
  fdRead @20 (
    fd :FdT, # The file descriptor from which to read data.
    iovs :List(IovecT), # List of scatter/gather vectors to which to store data.
  ) -> (
    nread :SizeT # The number of bytes read.
  );

  # Read directory entries from a directory.
  # When successful, the contents of the output buffer consist of a sequence of directory entries. Each directory entry consists of a __wasi_dirent_t object, followed by __wasi_dirent_t::d_namlen bytes holding the name of the directory entry.
  # This function fills the output buffer as much as possible, potentially truncating the last directory entry. This allows the caller to grow its read buffer size in case it's too small to fit a single large directory entry, or skip the oversized directory entry.
  fdReaddir @21 (
    fd :FdT, # The directory from which to read the directory entries.
    buf :Data, # The buffer where directory entries are stored.
    cookie :DircookieT # The location within the directory to start reading. 
  ) -> (
    bufused :SizeT # The number of bytes stored in the read buffer. If less than the size of the read buffer, the end of the directory has been reached.
  );

  # Atomically replace a file descriptor by renumbering another file descriptor.
  # Due to the strong focus on thread safety, this environment does not provide a mechanism to duplicate or renumber a file descriptor to an arbitrary number, like dup2(). This would be prone to race conditions, as an actual file descriptor with the same number could be allocated by a different thread at the same time.
  # This function provides a way to atomically renumber file descriptors, which would disappear if dup2() were to be removed entirely.
  fdRenumber @22 (
    from :FdT, # The file descriptor to renumber.
    to :FdT, # The file descriptor to overwrite.  
  ) -> ();

  # Move the offset of a file descriptor.
  # Note: This is similar to lseek in POSIX.
  fdSeek @23 (
    fd :FdT, # The file descriptor to operate on.
    offset :FiledeltaT, # The number of bytes to move.
    whence :WhenceT, # The base from which the offset is relative.
  ) -> (
    newoffset :FilesizeT # The new offset of the file descriptor, relative to the start of the file.
  );

  # Synchronize the data and metadata of a file to disk.
  # Note: This is similar to fsync in POSIX.
  fdSync @24 (
    fd :FdT, # The file descriptor of the file containing the data and metadata to synchronize to disk.
  ) -> ();

  # Return the current offset of a file descriptor.
  # Note: This is similar to lseek(fd, 0, SEEK_CUR) in POSIX.
  fdTell @25 (
    fd :FdT # The file descriptor to inspect.
  ) -> (
    offset :FilesizeT # The current offset of the file descriptor, relative to the start of the file.
  );

  # Write to a file descriptor.
  # Note: This is similar to writev in POSIX.
  fdWrite @26 (
    fd :FdT, # The file descriptor to which to write data.
    iovs :CiovecT # List of scatter/gather vectors from which to retrieve data.
  ) -> (
    nwritten :SizeT
  );

  # Create a directory.
  # Note: This is similar to mkdirat in POSIX.
  pathCreateDirectory @27 (
    fd :FdT, # The working directory at which the resolution of the path starts.
    path :Data # The path at which to create the directory.
  ) -> ();

  # Return the attributes of a file or directory.
  # Note: This is similar to stat in POSIX.
  pathFilestatGet @28 (
    fd :FdT, # The working directory at which the resolution of the path starts.
    flags :LookupFlagsT, # Flags determining the method of how the path is resolved.
    path :Data #The path of the file or directory to inspect.     
  ) -> ();

  # Adjust the timestamps of a file or directory.
  # Note: This is similar to utimensat in POSIX.
  pathFilestatSetTimes @29 (
    fd :FdT, # The working directory at which the resolution of the path starts.
    flags :LookupFlagsT, # Flags determining the method of how the path is resolved.
    path :Data, # The path of the file or directory to operate on.
    stAtim :TimestampT, # The desired values of the data access timestamp.
    stMtim :TimestampT, # The desired values of the data modification timestamp.
    fstFlags :FstflagsT # A bitmask indicating which timestamps to adjust.
  ) -> ();

  # Create a hard link.
  # Note: This is similar to linkat in POSIX.
  pathLink @30 (
    oldFd :FdT, # The working directory at which the resolution of the old path starts.
    oldFlags :LookupFlagsT, # Flags determining the method of how the path is resolved.
    oldPath :Data, # The source path from which to link.
    newFd :FdT, # The working directory at which the resolution of the new path starts.
    newPath :Data # The destination path at which to create the hard link.
  ) -> ();

  # Open a file or directory.
  # The returned file descriptor is not guaranteed to be the lowest-numbered file descriptor not currently open; it is randomized to prevent applications from depending on making assumptions about indexes, since this is error-prone in multi-threaded contexts. The returned file descriptor is guaranteed to be less than 231.
  # Note: This is similar to openat in POSIX.
  pathOpen @31 (
    dirfd :FdT, # The working directory at which the resolution of the path starts.
    dirflags :LookupFlagsT, # Flags determining the method of how the path is resolved.
    path :Data, # The relative path of the file or directory to open, relative to the dirfd directory.
    oFlags :OflagsT, # The method by which to open the file.
    fsRightsBase :RightsT, # The initial rights of the newly created file descriptor. The implementation is allowed to return a file descriptor with fewer rights than specified, if and only if those rights do not apply to the type of file being opened.
    fsRightsInheriting :RightsT, # The base rights are rights that will apply to operations using the file descriptor itself, while the inheriting rights are rights that apply to file descriptors derived from it. 
    fsFlags :FdflagsT # The initial flags of the file descriptor.
  ) -> (
    fd :FdT # The file descriptor of the file that has been opened.
  );

  # Read the contents of a symbolic link.
  # Note: This is similar to readlinkat in POSIX.
  pathReadlink @32 (
    fd :FdT, # The working directory at which the resolution of the path starts.
    path :Data # The path of the symbolic link from which to read.
  ) -> (
    buf :Data, # The buffer to which to write the contents of the symbolic link.
    bufused :SizeT # The number of bytes placed in the buffer.
  );

  # Remove a directory.
  # Return __WASI_ENOTEMPTY if the directory is not empty.
  # Note: This is similar to unlinkat(fd, path, AT_REMOVEDIR) in POSIX.
  pathRemoveDirectory @33 (
    fd :FdT, # The working directory at which the resolution of the path starts.
    path :Data, # The path to a directory to remove.
  ) -> ();

  # Rename a file or directory.
  # Note: This is similar to renameat in POSIX.
  pathRename @34 (
    oldFd :FdT, # The working directory at which the resolution of the old path starts.
    oldPath :Data, # The source path of the file or directory to rename.
    newFd :FdT, # The working directory at which the resolution of the new path starts.
    newPath :Data # The destination path to which to rename the file or directory.
  ) -> ();

  # Create a symbolic link.
  # Note: This is similar to symlinkat in POSIX.
  pathSymlink @35 (
    oldPath :Data, # The contents of the symbolic link.
    fd  :FdT, # The working directory at which the resolution of the path starts.
    newPath :Data # The destination path at which to create the symbolic link.
  ) -> ();

  # Unlink a file.
  # Return __WASI_EISDIR if the path refers to a directory.
  # Note: This is similar to unlinkat(fd, path, 0) in POSIX.
  pathUnlinkFile @36 (
    fd :FdT, # The working directory at which the resolution of the path starts.
    path :Data # The path to a file to unlink.
  ) -> ();

  # Concurrently poll for the occurrence of a set of events.
  pollOneoff @37 (
    in :SubscriptionT, # The events to which to subscribe.
    out :EventT, # The events that have occurred.
    nsubscriptions :SizeT # Both the number of subscriptions and events. 
  ) -> (
    nevents :SizeT # The number of events stored.
  );

  # Terminate the process normally. An exit code of 0 indicates successful termination of the program. The meanings of other values is dependent on the environment.
  # Note: This is similar to _Exit in POSIX.
  procExit @38 (
    rval :ExitcodeT # The exit code returned by the process.
  ) -> ();

  # Send a signal to the process of the calling thread.
  # Note: This is similar to raise in POSIX.
  procRaise @39 (
    sig :SignalT # The signal condition to trigger.
  ) -> ();

  # Write high-quality random data into a buffer.
  # This function blocks when the implementation is unable to immediately provide sufficient high-quality random data.
  # This function may execute slowly, so when large mounts of random data are required, it's advisable to use this function to seed a pseudo-random number generator, rather than to provide the random data directly.
  randomGet @40 (
    buf :Data # The buffer to fill with random data.
  ) -> ();

  # Temporarily yield execution of the calling thread.
  # Note: This is similar to sched_yield in POSIX.
  schedYield @41 () -> ();

  # Receive a message from a socket.
  # Note: This is similar to recv in POSIX, though it also supports reading the data into multiple buffers in the manner of readv.
  sockRecv @42 (
    sock :FdT, # The socket on which to receive data.
    riData :List(IovecT), # List of scatter/gather vectors to which to store data.
    riFlags :RiflagsT # Message flags.
  ) -> (
    roDatalen :SizeT, # Number of bytes stored in ri_data.
    roFlags :RoFlags # Message flags.
  );

  # Send a message on a socket.
  # Note: This is similar to send in POSIX, though it also supports writing the data from multiple buffers in the manner of writev.
  sockSend @43 (
    sock :FdT, # The socket on which to send data.
    siData :List(CiovecT), # List of scatter/gather vectors to which to retrieve data
    siFlags :SiflagsT # Message flags.
  ) -> (
    soDatalen :SizeT # Number of bytes transmitted.
  );
   
  # Shut down socket send and receive channels.
  # Note: This is similar to shutdown in POSIX.
  sockShutdown @44 (
    sock :FdT, # The socket on which to shutdown channels.
    how : SdflagsT # Which channels on the socket to shut down.
  ) -> ();
}
