;; WASI Sockets.
;;
;; Some content here is derived from [CloudABI](https://github.com/NuxiNL/cloudabi).
;;
;; This is a `witx` file. See [here](https://github.com/WebAssembly/WASI/tree/master/docs/witx.md)
;; for an explanation of what that means.

(use "typenames.witx")

(module $wasi_ephemeral_sock
  ;;; Linear memory to be accessed by WASI functions that need it.
  (import "memory" (memory))

  ;;; Returns the local address to which the socket is bound.
  ;;;
  ;;; Note: This is similar to `getsockname` in POSIX
  ;;;
  ;;; When successful, the contents of the output buffer consist of an IP address,
  ;;; either IP4 or IP6.
  (@interface func (export "addr_local")
    ;;; Host to resolve
    (param $fd $fd)
    ;;; The buffer where IP addresses will be stored
    (param $buf (@witx pointer u8))
    (param $buf_len $size)
    (result $error (expected (error $errno)))
  )

  ;;; Returns the remote address to which the socket is connected to.
  ;;;
  ;;; Note: This is similar to `getpeername` in POSIX
  ;;;
  ;;; When successful, the contents of the output buffer consist of an IP address,
  ;;; either IP4 or IP6.
  (@interface func (export "addr_remote")
    ;;; Host to resolve
    (param $fd $fd)
    ;;; The buffer where IP addresses will be stored
    (param $buf (@witx pointer u8))
    (param $buf_len $size)
    (result $error (expected (error $errno)))
  )

  ;;; Open a socket
  ;;;
  ;;; The first argument to this function is a handle to an
  ;;; address pool. The address pool determines what actions can
  ;;; be performed and at which addresses they can be performed to.
  ;;;
  ;;; The address pool cannot be re-assigned. You will need to close
  ;;; the socket and open a new one to use a different address pool.
  ;;;
  ;;; Note: This is similar to `socket` in POSIX using PF_INET
  (@interface func (export "open")
    ;;; Address pool file descriptor
    (param $pool $fd)
    ;;; Address family
    (param $af $address_family)
    ;;; Socket type, either datagram or stream
    (param $socktype $sock_type)
    ;;; The opened socket
    (result $error (expected $fd (error $errno)))
  )

  ;;; Close a socket (this is an alias for `fd_close`)
  ;;; Note: This is similar to `close` in POSIX.
  (@interface func (export "close")
    ;;; Socket descriptor
    (param $fd $fd)
    (result $error (expected (error $errno)))
  )

  ;;; Enable/disable address reuse on a socket
  ;;; Note: This is similar to `setsockopt` in POSIX for SO_REUSEADDR
  (@interface func (export "set_reuse_addr")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; 1 to enable, 0 to disable
    (param $reuse u8)
    (result $error (expected (error $errno)))
  )

  ;;; Retrieve status of address reuse on a socket
  ;;; Note: This is similar to `getsockopt` in POSIX for SO_REUSEADDR
  (@interface func (export "get_reuse_addr")
    ;;; Socket descriptor
    (param $fd $fd)
    (result $error (expected $reuse (error $errno)))
  )

  ;;; Enable port reuse on a socket
  ;;; Note: This is similar to `setsockopt` in POSIX for SO_REUSEPORT
  (@interface func (export "set_reuse_port")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; 1 to enable, 0 to disable
    (param $reuse u8)
    (result $error (expected (error $errno)))
  )

  ;;; Retrieve status of port reuse on a socket
  ;;; Note: This is similar to `getsockopt` in POSIX for SO_REUSEPORT
  (@interface func (export "get_reuse_port")
    ;;; Socket descriptor
    (param $fd $fd)
    (result $error (expected $reuse (error $errno)))
  )

  ;;; Set size of receive buffer
  ;;; Note: This is similar to `setsockopt` in POSIX for SO_RCVBUF
  (@interface func (export "set_recv_buf_size")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Buffer size
    (param $size $size)
    (result $error (expected (error $errno)))
  )

  ;;; Retrieve the size of the receive buffer
  ;;; Note: This is similar to `getsockopt` in POSIX for SO_RCVBUF
  (@interface func (export "get_recv_buf_size")
    ;;; Socket descriptor
    (param $fd $fd)
    (result $error (expected $size (error $errno)))
  )

  ;;; Set size of send buffer
  ;;; Note: This is similar to `setsockopt` in POSIX for SO_SNDBUF
  (@interface func (export "set_send_buf_size")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Buffer size
    (param $size $size)
    (result $error (expected (error $errno)))
  )

  ;;; Retrieve the size of the send buffer
  ;;; Note: This is similar to `getsockopt` in POSIX for SO_SNDBUF
  (@interface func (export "get_send_buf_size")
    ;;; Socket descriptor
    (param $fd $fd)
    (result $error (expected $size (error $errno)))
  )

  ;;; Bind a socket
  ;;; Note: This is similar to `bind` in POSIX using PF_INET
  (@interface func (export "bind")
    ;;; File descriptor of the socket to be bind
    (param $fd $fd)
    ;;; Address to bind the socket to
    (param $addr (@witx pointer $addr))
    (result $error (expected (error $errno)))
  )

  ;;; Listen for connections on a socket
  ;;; Note: This is similar to `listen`
  (@interface func (export "listen")
    ;;; File descriptor of the socket to be bind
    (param $fd $fd)
    ;;; Maximum size of the queue for pending connections
    (param $backlog $size)
    (result $error (expected (error $errno)))
  )

  ;;; Accept a connection on a socket
  ;;; Note: This is similar to `accept`
  (@interface func (export "accept")
    ;;; File descriptor of the socket to be bind
    (param $fd $fd)
    (result $error (expected $fd (error $errno)))
  )

  ;;; Initiate a connection on a socket to the specified address
  ;;; Note: This is similar to `connect` in POSIX
  (@interface func (export "connect")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Address of the socket to connect to
    (param $addr (@witx pointer $addr))
    (result $error (expected (error $errno)))
  )

  ;;; Receive a message from a socket.
  ;;; Note: This is similar to `recv` in POSIX.
  (@interface func (export "recv")
    (param $fd $fd)
    ;;; The buffer where data will be stored
    (param $buf (@witx pointer u8))
    (param $buf_len $size)
    ;;; Message flags.
    (param $ri_flags $riflags)
    ;;; Number of bytes stored in ri_data and message flags.
    (result $error (expected (tuple $size $roflags) (error $errno)))
  )

  ;;; Send a message on a socket.
  ;;; Note: This is similar to `send` in POSIX.
  (@interface func (export "send")
    (param $fd $fd)
    ;;; The buffer where data will be stored
    (param $buf (@witx pointer u8))
    (param $buf_len $size)
    ;;; Message flags.
    (param $si_flags $siflags)
    ;;; Number of bytes transmitted.
    (result $error (expected $size (error $errno)))
  )

  ;;; Shut down socket send and receive channels.
  ;;; Note: This is similar to `shutdown` in POSIX.
  (@interface func (export "shutdown")
    (param $fd $fd)
    ;;; Which channels on the socket to shut down.
    (param $how $sdflags)
    (result $error (expected (error $errno)))
  )
)
